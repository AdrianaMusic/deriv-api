// This file was automatically generated by scripts/regen-js.pl at 20190711-150343
// applies JSON schema to generate Deriv API

// =======================
// ----- API Methods -----
// =======================

export default class DerivAPICalls {
    // To be implemented by the sub-class
    // constructor() { }

    accountClosure(args = {}) {
        const config = {
            account_closure: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            reason     : {
                required: 1,
                type    : 'string',
            },
            req_id: {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'account_closure',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    accountSecurity(args = {}) {
        const config = {
            account_security: {
                required: 1,
                type    : 'numeric',
            },
            otp: {
                type: 'string',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            totp_action: {},
        };

        const parsedArgs = parseArgs({
            method        : 'account_security',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    accountStatistics(args = {}) {
        const config = {
            account_statistics: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'account_statistics',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    activeSymbols(args = {}) {
        const config = {
            active_symbols: {
                required: 1,
            },
            landing_company: {},
            passthrough    : {},
            product_type   : {},
            req_id         : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'active_symbols',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    apiToken(args = {}) {
        const config = {
            api_token: {
                required: 1,
                type    : 'numeric',
            },
            delete_token: {
                type: 'string',
            },
            new_token: {
                type: 'string',
            },
            new_token_scopes: {},
            passthrough     : {},
            req_id          : {
                type: 'numeric',
            },
            valid_for_current_ip_only: {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'api_token',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    appDelete(args = {}) {
        const config = {
            app_delete: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'app_delete',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    appGet(args = {}) {
        const config = {
            app_get: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'app_get',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    appList(args = {}) {
        const config = {
            app_list: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'app_list',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    appMarkupDetails(args = {}) {
        const config = {
            app_id: {
                type: 'numeric',
            },
            app_markup_details: {
                required: 1,
                type    : 'numeric',
            },
            client_loginid: {
                type: 'string',
            },
            date_from: {
                required: 1,
                type    : 'string',
            },
            date_to: {
                required: 1,
                type    : 'string',
            },
            description: {
                type: 'numeric',
            },
            limit: {
                type: 'numeric',
            },
            offset: {
                type: 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            sort: {
                type: 'string',
            },
            sort_fields: {},
        };

        const parsedArgs = parseArgs({
            method        : 'app_markup_details',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    appRegister(args = {}) {
        const config = {
            app_markup_percentage: {
                type: 'numeric',
            },
            app_register: {
                required: 1,
                type    : 'numeric',
            },
            appstore: {
                type: 'string',
            },
            github: {
                type: 'string',
            },
            googleplay: {
                type: 'string',
            },
            homepage: {
                type: 'string',
            },
            name: {
                required: 1,
                type    : 'string',
            },
            passthrough : {},
            redirect_uri: {
                required: 1,
                type    : 'string',
            },
            req_id: {
                type: 'numeric',
            },
            scopes: {
                required: 1,
            },
            verification_uri: {
                type: 'string',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'app_register',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    appUpdate(args = {}) {
        const config = {
            app_markup_percentage: {
                type: 'numeric',
            },
            app_update: {
                required: 1,
                type    : 'numeric',
            },
            appstore: {
                type: 'string',
            },
            github: {
                type: 'string',
            },
            googleplay: {
                type: 'string',
            },
            homepage: {
                type: 'string',
            },
            name: {
                required: 1,
                type    : 'string',
            },
            passthrough : {},
            redirect_uri: {
                required: 1,
                type    : 'string',
            },
            req_id: {
                type: 'numeric',
            },
            scopes: {
                required: 1,
            },
            verification_uri: {
                type: 'string',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'app_update',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    assetIndex(args = {}) {
        const config = {
            asset_index: {
                required: 1,
                type    : 'numeric',
            },
            landing_company: {},
            passthrough    : {},
            req_id         : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'asset_index',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    authorize(args = {}) {
        const config = {
            add_to_login_history: {},
            authorize           : {
                required: 1,
                type    : 'string',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'authorize',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    balance(args = {}) {
        const config = {
            balance: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            subscribe: {},
        };

        const parsedArgs = parseArgs({
            method        : 'balance',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    buy(args = {}) {
        const config = {
            buy: {
                required: 1,
                type    : 'string',
            },
            parameters: {
                amount: {
                    type: 'numeric',
                },
                app_markup_percentage: {
                    type: 'numeric',
                },
                barrier: {
                    type: 'string',
                },
                barrier2: {
                    type: 'string',
                },
                basis        : {},
                contract_type: {
                    required: 1,
                    type    : 'string',
                },
                currency: {
                    required: 1,
                    type    : 'string',
                },
                date_expiry: {
                    type: 'numeric',
                },
                date_start: {
                    type: 'numeric',
                },
                duration: {
                    type: 'numeric',
                },
                duration_unit: {},
                product_type : {
                    type: 'string',
                },
                selected_tick: {
                    type: 'numeric',
                },
                symbol: {
                    required: 1,
                    type    : 'string',
                },
                trading_period_start: {
                    type: 'numeric',
                },
            },
            passthrough: {},
            price      : {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
            subscribe: {},
        };

        const parsedArgs = parseArgs({
            method        : 'buy',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    buyContractForMultipleAccounts(args = {}) {
        const config = {
            buy_contract_for_multiple_accounts: {
                required: 1,
                type    : 'string',
            },
            parameters: {
                amount: {
                    type: 'numeric',
                },
                app_markup_percentage: {
                    type: 'numeric',
                },
                barrier: {
                    type: 'string',
                },
                barrier2: {
                    type: 'string',
                },
                basis        : {},
                contract_type: {
                    required: 1,
                    type    : 'string',
                },
                currency: {
                    required: 1,
                    type    : 'string',
                },
                date_expiry: {
                    type: 'numeric',
                },
                date_start: {
                    type: 'numeric',
                },
                duration: {
                    type: 'numeric',
                },
                duration_unit: {},
                selected_tick: {
                    type: 'numeric',
                },
                symbol: {
                    required: 1,
                    type    : 'string',
                },
            },
            passthrough: {},
            price      : {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
            tokens: {
                required: 1,
            },
        };

        const parsedArgs = parseArgs({
            method        : 'buy_contract_for_multiple_accounts',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    cashier(args = {}) {
        const config = {
            cashier: {
                required: 1,
            },
            passthrough: {},
            provider   : {},
            req_id     : {
                type: 'numeric',
            },
            verification_code: {
                type: 'string',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'cashier',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    cashierPassword(args = {}) {
        const config = {
            cashier_password: {
                required: 1,
                type    : 'numeric',
            },
            lock_password: {
                type: 'string',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            unlock_password: {
                type: 'string',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'cashier_password',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    changePassword(args = {}) {
        const config = {
            change_password: {
                required: 1,
                type    : 'numeric',
            },
            new_password: {
                required: 1,
                type    : 'string',
            },
            old_password: {
                required: 1,
                type    : 'string',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'change_password',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    contractsFor(args = {}) {
        const config = {
            contracts_for: {
                required: 1,
                type    : 'string',
            },
            currency: {
                type: 'string',
            },
            landing_company: {},
            passthrough    : {},
            product_type   : {},
            req_id         : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'contracts_for',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    copyStart(args = {}) {
        const config = {
            assets    : {},
            copy_start: {
                required: 1,
                type    : 'string',
            },
            max_trade_stake: {
                type: 'numeric',
            },
            min_trade_stake: {
                type: 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            trade_types: {},
        };

        const parsedArgs = parseArgs({
            method        : 'copy_start',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    copyStop(args = {}) {
        const config = {
            copy_stop: {
                required: 1,
                type    : 'string',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'copy_stop',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    copytradingList(args = {}) {
        const config = {
            copytrading_list: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'copytrading_list',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    copytradingStatistics(args = {}) {
        const config = {
            copytrading_statistics: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            trader_id: {
                required: 1,
                type    : 'string',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'copytrading_statistics',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    documentUpload(args = {}) {
        const config = {
            document_format: {
                required: 1,
            },
            document_id: {
                type: 'string',
            },
            document_type: {
                required: 1,
                type    : 'string',
            },
            document_upload: {
                required: 1,
                type    : 'numeric',
            },
            expected_checksum: {
                required: 1,
                type    : 'string',
            },
            expiration_date: {
                type: 'string',
            },
            file_size: {
                required: 1,
                type    : 'numeric',
            },
            page_type  : {},
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'document_upload',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    exchangeRates(args = {}) {
        const config = {
            base_currency: {
                required: 1,
                type    : 'string',
            },
            exchange_rates: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'exchange_rates',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    forget(args = {}) {
        const config = {
            forget: {
                required: 1,
                type    : 'string',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'forget',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    forgetAll(args = {}) {
        const config = {
            forget_all: {
                required: 1,
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'forget_all',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    getAccountStatus(args = {}) {
        const config = {
            get_account_status: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'get_account_status',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    getFinancialAssessment(args = {}) {
        const config = {
            get_financial_assessment: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'get_financial_assessment',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    getLimits(args = {}) {
        const config = {
            get_limits: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'get_limits',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    getSelfExclusion(args = {}) {
        const config = {
            get_self_exclusion: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'get_self_exclusion',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    getSettings(args = {}) {
        const config = {
            get_settings: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'get_settings',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    landingCompany(args = {}) {
        const config = {
            landing_company: {
                required: 1,
                type    : 'string',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'landing_company',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    landingCompanyDetails(args = {}) {
        const config = {
            landing_company_details: {
                required: 1,
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'landing_company_details',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    loginHistory(args = {}) {
        const config = {
            limit: {
                type: 'numeric',
            },
            login_history: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'login_history',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    logout(args = {}) {
        const config = {
            logout: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'logout',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    mt5Deposit(args = {}) {
        const config = {
            amount: {
                type: 'numeric',
            },
            from_binary: {
                type: 'string',
            },
            mt5_deposit: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            to_mt5: {
                required: 1,
                type    : 'string',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'mt5_deposit',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    mt5GetSettings(args = {}) {
        const config = {
            login: {
                required: 1,
                type    : 'string',
            },
            mt5_get_settings: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'mt5_get_settings',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    mt5LoginList(args = {}) {
        const config = {
            mt5_login_list: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'mt5_login_list',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    mt5Mamm(args = {}) {
        const config = {
            action: {},
            login : {
                required: 1,
                type    : 'string',
            },
            mt5_mamm: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'mt5_mamm',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    mt5NewAccount(args = {}) {
        const config = {
            account_type: {
                required: 1,
            },
            address: {
                type: 'string',
            },
            city: {
                type: 'string',
            },
            company: {
                type: 'string',
            },
            country: {
                type: 'string',
            },
            email: {
                required: 1,
                type    : 'string',
            },
            investPassword: {
                required: 1,
                type    : 'string',
            },
            leverage: {
                required: 1,
                type    : 'string',
            },
            mainPassword: {
                required: 1,
                type    : 'string',
            },
            manager_id: {
                type: 'numeric',
            },
            mt5_account_type: {},
            mt5_new_account : {
                required: 1,
                type    : 'numeric',
            },
            name: {
                required: 1,
                type    : 'string',
            },
            passthrough: {},
            phone      : {
                type: 'string',
            },
            phonePassword: {
                type: 'string',
            },
            req_id: {
                type: 'numeric',
            },
            state: {
                type: 'string',
            },
            zipCode: {
                type: 'string',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'mt5_new_account',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    mt5PasswordChange(args = {}) {
        const config = {
            login: {
                required: 1,
                type    : 'string',
            },
            mt5_password_change: {
                required: 1,
                type    : 'numeric',
            },
            new_password: {
                required: 1,
                type    : 'string',
            },
            old_password: {
                required: 1,
                type    : 'string',
            },
            passthrough  : {},
            password_type: {},
            req_id       : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'mt5_password_change',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    mt5PasswordCheck(args = {}) {
        const config = {
            login: {
                required: 1,
                type    : 'string',
            },
            mt5_password_check: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            password   : {
                required: 1,
                type    : 'string',
            },
            password_type: {},
            req_id       : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'mt5_password_check',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    mt5PasswordReset(args = {}) {
        const config = {
            login: {
                required: 1,
                type    : 'string',
            },
            mt5_password_reset: {
                required: 1,
                type    : 'numeric',
            },
            new_password: {
                required: 1,
                type    : 'string',
            },
            passthrough  : {},
            password_type: {
                type: 'string',
            },
            req_id: {
                type: 'numeric',
            },
            verification_code: {
                required: 1,
                type    : 'string',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'mt5_password_reset',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    mt5Withdrawal(args = {}) {
        const config = {
            amount: {
                required: 1,
                type    : 'numeric',
            },
            from_mt5: {
                required: 1,
                type    : 'string',
            },
            mt5_withdrawal: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            to_binary: {
                required: 1,
                type    : 'string',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'mt5_withdrawal',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    newAccountMaltainvest(args = {}) {
        const config = {
            accept_risk: {
                required: 1,
                type    : 'numeric',
            },
            account_opening_reason: {
                type: 'string',
            },
            account_turnover: {},
            address_city    : {
                required: 1,
                type    : 'string',
            },
            address_line_1: {
                required: 1,
                type    : 'string',
            },
            address_line_2: {
                type: 'string',
            },
            address_postcode: {
                type: 'string',
            },
            address_state: {
                type: 'string',
            },
            affiliate_token: {
                type: 'string',
            },
            binary_options_trading_experience: {},
            binary_options_trading_frequency : {},
            cfd_trading_experience           : {},
            cfd_trading_frequency            : {},
            citizen                          : {
                type: 'string',
            },
            client_type  : {},
            date_of_birth: {
                required: 1,
                type    : 'string',
            },
            education_level: {
                required: 1,
            },
            employment_industry: {
                required: 1,
            },
            employment_status: {},
            estimated_worth  : {
                required: 1,
            },
            first_name: {
                required: 1,
                type    : 'string',
            },
            forex_trading_experience: {},
            forex_trading_frequency : {},
            income_source           : {
                required: 1,
            },
            last_name: {
                required: 1,
                type    : 'string',
            },
            net_income: {
                required: 1,
            },
            new_account_maltainvest: {
                required: 1,
                type    : 'numeric',
            },
            occupation: {
                required: 1,
            },
            other_instruments_trading_experience: {},
            other_instruments_trading_frequency : {},
            passthrough                         : {},
            phone                               : {
                required: 1,
                type    : 'string',
            },
            place_of_birth: {
                required: 1,
                type    : 'string',
            },
            req_id: {
                type: 'numeric',
            },
            residence: {
                required: 1,
                type    : 'string',
            },
            salutation: {
                required: 1,
            },
            secret_answer: {
                type: 'string',
            },
            secret_question          : {},
            source_of_wealth         : {},
            tax_identification_number: {
                required: 1,
                type    : 'string',
            },
            tax_residence: {
                required: 1,
                type    : 'string',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'new_account_maltainvest',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    newAccountReal(args = {}) {
        const config = {
            account_opening_reason: {
                type: 'string',
            },
            account_turnover: {},
            address_city    : {
                type: 'string',
            },
            address_line_1: {
                type: 'string',
            },
            address_line_2: {
                type: 'string',
            },
            address_postcode: {
                type: 'string',
            },
            address_state: {
                type: 'string',
            },
            affiliate_token: {
                type: 'string',
            },
            citizen      : {},
            client_type  : {},
            currency     : {},
            date_of_birth: {
                required: 1,
                type    : 'string',
            },
            first_name: {
                required: 1,
                type    : 'string',
            },
            last_name: {
                required: 1,
                type    : 'string',
            },
            new_account_real: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            phone      : {
                type: 'string',
            },
            place_of_birth: {
                type: 'string',
            },
            req_id: {
                type: 'numeric',
            },
            residence: {
                required: 1,
                type    : 'string',
            },
            salutation: {
                required: 1,
            },
            secret_answer: {
                type: 'string',
            },
            secret_question          : {},
            tax_identification_number: {
                type: 'string',
            },
            tax_residence: {
                type: 'string',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'new_account_real',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    newAccountVirtual(args = {}) {
        const config = {
            affiliate_token: {
                type: 'string',
            },
            client_password: {
                required: 1,
                type    : 'string',
            },
            date_first_contact: {
                type: 'string',
            },
            gclid_url: {
                type: 'string',
            },
            new_account_virtual: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            residence: {
                required: 1,
                type    : 'string',
            },
            signup_device: {},
            utm_campaign : {
                type: 'string',
            },
            utm_medium: {
                type: 'string',
            },
            utm_source: {
                type: 'string',
            },
            verification_code: {
                required: 1,
                type    : 'string',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'new_account_virtual',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    oauthApps(args = {}) {
        const config = {
            oauth_apps: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'oauth_apps',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    paymentagentList(args = {}) {
        const config = {
            currency: {
                type: 'string',
            },
            passthrough      : {},
            paymentagent_list: {
                required: 1,
                type    : 'string',
            },
            req_id: {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'paymentagent_list',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    paymentagentTransfer(args = {}) {
        const config = {
            amount: {
                required: 1,
                type    : 'numeric',
            },
            currency: {
                required: 1,
                type    : 'string',
            },
            description: {
                type: 'string',
            },
            dry_run: {
                type: 'numeric',
            },
            passthrough          : {},
            paymentagent_transfer: {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
            transfer_to: {
                required: 1,
                type    : 'string',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'paymentagent_transfer',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    paymentagentWithdraw(args = {}) {
        const config = {
            amount: {
                required: 1,
                type    : 'numeric',
            },
            currency: {
                required: 1,
                type    : 'string',
            },
            description: {
                type: 'string',
            },
            dry_run: {
                type: 'numeric',
            },
            passthrough         : {},
            paymentagent_loginid: {
                required: 1,
                type    : 'string',
            },
            paymentagent_withdraw: {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
            verification_code: {
                required: 1,
                type    : 'string',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'paymentagent_withdraw',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    payoutCurrencies(args = {}) {
        const config = {
            passthrough      : {},
            payout_currencies: {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'payout_currencies',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    ping(args = {}) {
        const config = {
            passthrough: {},
            ping       : {
                required: 1,
            },
            req_id: {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'ping',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    portfolio(args = {}) {
        const config = {
            passthrough: {},
            portfolio  : {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'portfolio',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    profitTable(args = {}) {
        const config = {
            date_from: {
                type: 'string',
            },
            date_to: {
                type: 'string',
            },
            description: {
                type: 'numeric',
            },
            limit: {
                type: 'numeric',
            },
            offset: {
                type: 'numeric',
            },
            passthrough : {},
            profit_table: {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
            sort: {
                type: 'string',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'profit_table',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    proposal(args = {}) {
        const config = {
            amount: {
                required: 1,
                type    : 'numeric',
            },
            barrier: {
                type: 'string',
            },
            barrier2: {
                type: 'string',
            },
            basis: {
                required: 1,
            },
            contract_type: {
                required: 1,
            },
            currency: {
                required: 1,
                type    : 'string',
            },
            date_expiry: {
                type: 'numeric',
            },
            date_start: {
                type: 'numeric',
            },
            duration: {
                type: 'numeric',
            },
            duration_unit: {},
            passthrough  : {},
            product_type : {},
            proposal     : {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
            selected_tick: {
                type: 'numeric',
            },
            subscribe: {},
            symbol   : {
                required: 1,
                type    : 'string',
            },
            trading_period_start: {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'proposal',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    proposalArray(args = {}) {
        const config = {
            amount: {
                required: 1,
                type    : 'numeric',
            },
            barriers: {
                required: 1,
            },
            basis: {
                required: 1,
            },
            contract_type: {
                required: 1,
            },
            currency: {
                required: 1,
                type    : 'string',
            },
            date_expiry: {
                type: 'numeric',
            },
            date_start: {
                type: 'numeric',
            },
            duration: {
                type: 'numeric',
            },
            duration_unit : {},
            passthrough   : {},
            product_type  : {},
            proposal_array: {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
            subscribe: {},
            symbol   : {
                required: 1,
                type    : 'string',
            },
            trading_period_start: {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'proposal_array',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    proposalOpenContract(args = {}) {
        const config = {
            contract_id: {
                type: 'numeric',
            },
            passthrough           : {},
            proposal_open_contract: {
                required: 1,
            },
            req_id: {
                type: 'numeric',
            },
            subscribe: {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'proposal_open_contract',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    realityCheck(args = {}) {
        const config = {
            passthrough  : {},
            reality_check: {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'reality_check',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    requestReport(args = {}) {
        const config = {
            date_from: {
                required: 1,
                type    : 'numeric',
            },
            date_to: {
                required: 1,
                type    : 'numeric',
            },
            passthrough: {},
            report_type: {
                required: 1,
                type    : 'string',
            },
            req_id: {
                type: 'numeric',
            },
            request_report: {
                required: 1,
                type    : 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'request_report',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    resetPassword(args = {}) {
        const config = {
            date_of_birth: {
                type: 'string',
            },
            new_password: {
                required: 1,
                type    : 'string',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            reset_password: {
                required: 1,
                type    : 'numeric',
            },
            verification_code: {
                required: 1,
                type    : 'string',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'reset_password',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    residenceList(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            residence_list: {
                required: 1,
                type    : 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'residence_list',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    revokeOauthApp(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            revoke_oauth_app: {
                required: 1,
                type    : 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'revoke_oauth_app',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    sell(args = {}) {
        const config = {
            passthrough: {},
            price      : {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
            sell: {
                required: 1,
                type    : 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'sell',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    sellContractForMultipleAccounts(args = {}) {
        const config = {
            passthrough: {},
            price      : {
                required: 1,
                type    : 'numeric',
            },
            req_id: {
                type: 'numeric',
            },
            sell_contract_for_multiple_accounts: {
                required: 1,
                type    : 'numeric',
            },
            shortcode: {
                required: 1,
                type    : 'string',
            },
            tokens: {
                required: 1,
            },
        };

        const parsedArgs = parseArgs({
            method        : 'sell_contract_for_multiple_accounts',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    sellExpired(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            sell_expired: {
                required: 1,
                type    : 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'sell_expired',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    serviceToken(args = {}) {
        const config = {
            passthrough: {},
            referrer   : {
                required: 1,
                type    : 'string',
            },
            req_id: {
                type: 'numeric',
            },
            service: {
                required: 1,
                type    : 'string',
            },
            service_token: {
                required: 1,
                type    : 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'service_token',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    setAccountCurrency(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            set_account_currency: {
                required: 1,
            },
        };

        const parsedArgs = parseArgs({
            method        : 'set_account_currency',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    setFinancialAssessment(args = {}) {
        const config = {
            account_turnover                 : {},
            binary_options_trading_experience: {},
            binary_options_trading_frequency : {},
            cfd_trading_experience           : {},
            cfd_trading_frequency            : {},
            education_level                  : {
                required: 1,
            },
            employment_industry: {
                required: 1,
            },
            employment_status: {},
            estimated_worth  : {
                required: 1,
            },
            forex_trading_experience: {},
            forex_trading_frequency : {},
            income_source           : {
                required: 1,
            },
            net_income: {
                required: 1,
            },
            occupation: {
                required: 1,
            },
            other_instruments_trading_experience: {},
            other_instruments_trading_frequency : {},
            passthrough                         : {},
            req_id                              : {
                type: 'numeric',
            },
            set_financial_assessment: {
                required: 1,
                type    : 'numeric',
            },
            source_of_wealth: {},
        };

        const parsedArgs = parseArgs({
            method        : 'set_financial_assessment',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    setSelfExclusion(args = {}) {
        const config = {
            exclude_until       : {},
            max_30day_losses    : {},
            max_30day_turnover  : {},
            max_7day_losses     : {},
            max_7day_turnover   : {},
            max_balance         : {},
            max_deposit         : {},
            max_deposit_end_date: {},
            max_losses          : {},
            max_open_bets       : {},
            max_turnover        : {},
            passthrough         : {},
            req_id              : {
                type: 'numeric',
            },
            session_duration_limit: {},
            set_self_exclusion    : {
                required: 1,
                type    : 'numeric',
            },
            timeout_until: {},
        };

        const parsedArgs = parseArgs({
            method        : 'set_self_exclusion',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    setSettings(args = {}) {
        const config = {
            account_opening_reason: {
                type: 'string',
            },
            address_city: {
                type: 'string',
            },
            address_line_1: {
                type: 'string',
            },
            address_line_2  : {},
            address_postcode: {
                type: 'string',
            },
            address_state: {
                type: 'string',
            },
            allow_copiers: {
                type: 'numeric',
            },
            citizen      : {},
            date_of_birth: {
                type: 'string',
            },
            email_consent: {
                type: 'numeric',
            },
            first_name: {
                type: 'string',
            },
            last_name: {
                type: 'string',
            },
            passthrough   : {},
            phone         : {},
            place_of_birth: {
                type: 'string',
            },
            req_id: {
                type: 'numeric',
            },
            request_professional_status: {
                type: 'numeric',
            },
            residence    : {},
            salutation   : {},
            secret_answer: {
                type: 'string',
            },
            secret_question: {},
            set_settings   : {
                required: 1,
                type    : 'numeric',
            },
            tax_identification_number: {
                type: 'string',
            },
            tax_residence: {
                type: 'string',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'set_settings',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    statement(args = {}) {
        const config = {
            action_type: {
                type: 'string',
            },
            date_from: {
                type: 'numeric',
            },
            date_to: {
                type: 'numeric',
            },
            description: {
                type: 'numeric',
            },
            limit: {
                type: 'numeric',
            },
            offset: {
                type: 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            statement: {
                required: 1,
                type    : 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'statement',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    statesList(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            states_list: {
                required: 1,
                type    : 'string',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'states_list',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    ticks(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            subscribe: {},
            ticks    : {
                required: 1,
            },
        };

        const parsedArgs = parseArgs({
            method        : 'ticks',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    ticksHistory(args = {}) {
        const config = {
            adjust_start_time: {
                type: 'numeric',
            },
            count: {
                type: 'numeric',
            },
            end: {
                required: 1,
                type    : 'string',
            },
            granularity: {
                type: 'numeric',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            start: {
                type: 'numeric',
            },
            style        : {},
            subscribe    : {},
            ticks_history: {
                required: 1,
                type    : 'string',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'ticks_history',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    time(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            time: {
                required: 1,
                type    : 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'time',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    tncApproval(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            tnc_approval: {
                required: 1,
                type    : 'numeric',
            },
            ukgc_funds_protection: {
                type: 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'tnc_approval',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    topupVirtual(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            topup_virtual: {
                required: 1,
                type    : 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'topup_virtual',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    tradingDurations(args = {}) {
        const config = {
            landing_company: {},
            passthrough    : {},
            req_id         : {
                type: 'numeric',
            },
            trading_durations: {
                required: 1,
                type    : 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'trading_durations',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    tradingTimes(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            trading_times: {
                required: 1,
                type    : 'string',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'trading_times',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    transaction(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            subscribe: {
                required: 1,
                type    : 'numeric',
            },
            transaction: {
                required: 1,
            },
        };

        const parsedArgs = parseArgs({
            method        : 'transaction',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    transferBetweenAccounts(args = {}) {
        const config = {
            account_from: {
                type: 'string',
            },
            account_to: {
                type: 'string',
            },
            amount: {
                type: 'numeric',
            },
            currency: {
                type: 'string',
            },
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            transfer_between_accounts: {
                required: 1,
                type    : 'numeric',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'transfer_between_accounts',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    verifyEmail(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            type: {
                required: 1,
            },
            url_parameters: {
                affiliate_token: {
                    type: 'string',
                },
                date_first_contact: {
                    type: 'string',
                },
                gclid_url: {
                    type: 'string',
                },
                signup_device: {},
                utm_campaign : {
                    type: 'string',
                },
                utm_medium: {
                    type: 'string',
                },
                utm_source: {
                    type: 'string',
                },
            },
            verify_email: {
                required: 1,
                type    : 'string',
            },
        };

        const parsedArgs = parseArgs({
            method        : 'verify_email',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }

    websiteStatus(args = {}) {
        const config = {
            passthrough: {},
            req_id     : {
                type: 'numeric',
            },
            subscribe     : {},
            website_status: {
                required: 1,
            },
        };

        const parsedArgs = parseArgs({
            method        : 'website_status',
            needsMethodArg: '1',
            args,
            config,
        });

        const error = validateArgs({ config, args: parsedArgs });

        if (error) {
            return Promise.reject(error);
        }

        return this.send(parsedArgs);
    }
}

// ==========================
// ----- Helper Methods -----
// ==========================

const isObject = value => value instanceof Object;

const typeCheckers = {
    object : isObject,
    numeric: value => !Number.isNaN(value * 1),
    string : value => typeof value === 'string',
    boolean: value => [true, false, 0, 1].includes(value),
};

function parseArgs({
    config, args, method, needsMethodArg,
}) {
    let parsedArgs = args;

    if (needsMethodArg && !isObject(parsedArgs)) {
        parsedArgs = { [method]: parsedArgs };
    }

    parsedArgs[method] = parsedArgs[method] || 1;

    Object.keys(parsedArgs).forEach((param) => {
        const value = parsedArgs[param];

        if (!(param in config)) return;

        if (config[param].type === 'string') {
            parsedArgs[param] = `${value}`;
        } else if (config[param].type === 'numeric') {
            parsedArgs[param] = parseInt(value, 10);
        } else if (config[param].type === 'boolean') {
            parsedArgs[param] = +value;
        }
    });

    return parsedArgs;
}

function validateArgs({ config, args }) {
    if (!isObject(args)) {
        return `Requires an object but a ${typeof args} is passed.`;
    }

    const errorMessages = [];

    const missing = Object.keys(config).filter(
        key => (config[key] || {}).required && !(key in args),
    );

    if (missing.length) {
        errorMessages.push(`Required parameters missing: ${missing.join(', ')}`);
    }

    Object.keys(args).forEach((param) => {
        const value = args[param];

        if (!(param in config)) return;

        const expectedType = config[param].type;

        if (!expectedType) return;

        if (!typeCheckers[expectedType](value)) {
            errorMessages.push(
                `${expectedType} value expected but found ${typeof value}: ${param}`,
            );
        }
    });

    return errorMessages.length ? errorMessages.join(' - ') : '';
}
